---
- name: Enable CRB/EPEL for RHEL-based platforms
  block:
    - name: Ensure EPEL repo is enabled
      yum:
        name: epel-release
        state: latest

    - name: Check if CRB is enabled for el9+ variants
      command:
        cmd: dnf repolist crb --enabled
      register: repolist
      changed_when: false
        
    - name: enable CRB repository for el9+ variants
      command:
        cmd: dnf config-manager --enable crb
      when: "'crb' not in repolist.stdout"

  when: ansible_os_family == "RedHat"

- name: Setup HTTP(S) firewall rules for RHEL-based platforms
  block:
    - name: "Allow traffic in default firewall zone for {{ item }}"
      ansible.posix.firewalld:
        service: "{{ item }}"
        permanent: true
        immediate: true
        state: enabled
      loop:
        - http
        - https
  when: ansible_os_family == "RedHat"

- name: Ensure snap is installed
  package:
    name: snapd
    state: present

- name: Ensure snapd is enabled
  systemd:
    name: snapd.socket
    enabled: true
    state: started

- name: Enable classic snap support
  file:
    src: /var/lib/snapd/snap
    dest: /snap
    state: link
  when: ansible_os_family != "Debian"

- name: Ensure snap core is present
  snap:
    name: core
    state: present

- name: Ensure certbot is not installed via system
  package:
    name: certbot
    state: absent

- name: Install Certbot via snap
  snap:
    name: certbot
    state: present
    classic: true

- name: Make certbot executable available
  file:
    src: /snap/bin/certbot
    dest: /usr/bin/certbot
    state: link

- name: Get FQDN for the host
  command: hostname -f
  register: hostname_out
  changed_when: false

- name: Extract FQDN
  set_fact:
    host_fqdn: "{{ hostname_out.stdout }}"

- name: Set Cert paths
  set_fact:
    ssl_key: "/etc/letsencrypt/live/{{ host_fqdn }}/privkey.pem"
    ssl_cert: "/etc/letsencrypt/live/{{ host_fqdn }}/fullchain.pem"

- name: "Setup Certbot to generate and renew SSL certificate for {{ host_fqdn }} as {{ cert_email}}"
  command:
    cmd: /usr/bin/certbot certonly{{ ' --test-cert ' if test_cert else ' ' }}--standalone --noninteractive --agree-tos --email {{ cert_email }} -d {{ host_fqdn }} 
    creates: "{{ ssl_key }}"
